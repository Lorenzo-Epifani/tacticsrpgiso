[gd_scene load_steps=13 format=3 uid="uid://bljmfu0b2ecug"]

[ext_resource type="Script" path="res://scenes/battle/action_logic.gd" id="1_8fiwh"]
[ext_resource type="Theme" uid="uid://3ah4a71wtj80" path="res://assets/ui/battle_ui/battle_panels.tres" id="1_kdefl"]

[sub_resource type="GDScript" id="GDScript_mkj42"]
script/source = "extends Node
var phase_data: Dictionary
var BN = Global.battle_nodes()
enum STATE { FREE, CHOOSE_MOVE, LOADING, CHOOSE_ATK}
var battle_phase_state = STATE.FREE
@onready var turn_queue = $TurnQueue
@onready var bpui = $BattlePhaseUI
#enum team { MY, ENEMY, ALLIED, NEUTRAL }

func _ready() -> void:
	setup_battle()
	get_node(\"BattlePhaseUI\").load_menu()

func set_state(_st=\"FREE\"):
	match _st:
		\"FREE\":	
			battle_phase_state = STATE.FREE
			BN.get_battle_cursor().unlock()
		\"CHOOSE_MOVE\":	
			battle_phase_state = STATE.CHOOSE_MOVE
		\"LOADING\":	
			BN.get_battle_cursor().lock()
			battle_phase_state = STATE.LOADING
		\"CHOOSE_ATK\":
			battle_phase_state = STATE.CHOOSE_ATK


func get_state():
	return battle_phase_state	
	
func setup_battle():
	battle_phase_state = STATE.FREE
	
	var cursor = BN.get_battle_cursor()
	cursor.update_cursor_position()
	var base_battle_ui = BN.get_base_battle_ui()
	base_battle_ui.show_()
	turn_queue.initialize()
	BN.get_HLayer().erase_all()
	
func get_turn_queue():
	var targetnode= get_node(\"TurnQueue\")
	return targetnode
	
	
\"\"\"
func battle_unit_sync(unit):
	#refresha unitcontainer/datagrid, aggiorna unit√† nella coda
	var unit_id=unit.id
	var uc = BN.get_unit_container()	
	BN.get_unit_container().refresh()
	
	
	for i in range(len(turn_queue.turn_queue)):  
		if turn_queue.turn_queue[i][\"unit\"].id == unit.id:
			turn_queue.turn_queue[i] = {\"unit\": unit, \"position\": unit.position}  # Modifica effettiva
		
	BN.get_battle_cursor().update_cursor_position()
\"\"\"
"

[sub_resource type="GDScript" id="GDScript_8g1m3"]
script/source = "extends Node
var BN = Global.battle_nodes()
var turn_queue = []
#enum team { MY, ENEMY, ALLIED, NEUTRAL }

func initialize():
	var uc = BN.get_unit_container()
	var temp_list=[]
	for pos_key in uc.data_dict:
		if uc.data_dict[pos_key].soft_stat[\"act_hp\"] > 0:  # Controlla se l'unit√† √® ancora in vita
			temp_list.append(uc.data_dict[pos_key])
	temp_list.sort_custom(func(a, b): 
		return a.soft_stat.spd > b.soft_stat.spd
	)
	turn_queue = temp_list.map(func(x): return x.id)
	print(\"TURN_QUEUE:::::->\")

	
	if uc.uc_lookup_by_id(turn_queue[0]).team==Global.team.ENEMY:
		get_tree().root.set_disable_input(true)
		#DO SOMETHING
		var enemy_AI=get_parent().get_node(\"EnemyAI\")
		enemy_AI.perform_turn()
	else:
		get_tree().root.set_disable_input(false)
		

func reload_queue():
	# Rimuove tutte le unit√† con hp <= 0
	turn_queue = turn_queue.filter(func(entry): return entry.unit.soft_stat[\"act_hp\"] > 0)
	# Se la queue ha almeno un elemento, sposta il primo in fondo
	if turn_queue.size() > 1:
		var first_element = turn_queue.pop_front() # Rimuove il primo elemento
		turn_queue.append(first_element) # Lo aggiunge in fondo
		print(\"-----------------------\")
		print(\"TURNO DI:\")
		print(\"NAME: \",turn_queue[0].unit.meta.name)
		focus_unit_with_turn()
		
		if turn_queue[0].unit.team==Global.team.ENEMY:
			get_tree().root.set_disable_input(true)
			#DO SOMETHING
			var enemy_AI=get_parent().get_node(\"EnemyAI\")
			enemy_AI.perform_turn()
		else:
			get_tree().root.set_disable_input(false)
	
	
func focus_unit_with_turn():
	var unit_with_turn=turn_queue[0]
	var cursor = BN.get_battle_cursor()
	cursor.relocate(unit_with_turn.position)
"

[sub_resource type="GDScript" id="GDScript_eke8b"]
script/source = "extends Node
"

[sub_resource type="GDScript" id="GDScript_ywtb7"]
script/source = "extends Node
var BN = Global.battle_nodes()

func move_action_map():
	var bp_root = get_parent().get_parent()
	bp_root.set_state(\"CHOOSE_MOVE\")
	compute_draw_map()
	pass
	
	

func compute_draw_map(step=5,atk_range=1,h_step=1,h_atk_range=\"TODO\"):
	#TODO ATK RANGE map AND HEIGHT HANDLING!
	#CRITERI DI COSTRUZIONE DELLA MAP, TODO TODO TODO
	var movemap_coarse = {}
	var cursor = BN.get_battle_cursor()
	var location = cursor.cursor_content[\"location\"]
	var hlayer = BN.get_HLayer()
	var data_grid = BN.get_data_grid()
	for x in range(location.x - step, location.x + step):
		for y in range(location.y - step, location.y + step):
			var distance = abs(location.x - x) + abs(location.y - y)
			if distance < step:
				if data_grid.is_steppable(Vector2i(x,y)):
					movemap_coarse[Vector2i(x,y)] = true
				#	data_grid.add_edit_entry(Vector2(x,y),null,null,null,\"MOVE\")
	for elem in movemap_coarse:
		var path_positions = get_node(\"Algorithms\").find_path(location,elem,movemap_coarse)
		if path_positions.size()!=0:
			data_grid.add_edit_entry(elem,null,null,null,\"MOVE\")
	
	var movemap = BN.get_data_grid().get_movemap()
	movemap[location]=true
	for elem in movemap:
		if !elem in movemap: data_grid.add_edit_entry(elem,null,null,null,\"ATK\")
		if !Vector2i(elem.x+atk_range,elem.y) in movemap: data_grid.add_edit_entry(Vector2i(elem.x+atk_range,elem.y),null,null,null,\"ATK\")
		if !Vector2i(elem.x-atk_range,elem.y) in movemap: data_grid.add_edit_entry(Vector2i(elem.x-atk_range,elem.y),null,null,null,\"ATK\")
		if !Vector2i(elem.x,elem.y-atk_range) in movemap: data_grid.add_edit_entry(Vector2i(elem.x,elem.y-atk_range),null,null,null,\"ATK\")
		if !Vector2i(elem.x,elem.y+atk_range) in movemap: data_grid.add_edit_entry(Vector2i(elem.x,elem.y+atk_range),null,null,null,\"ATK\")
		
	hlayer.reload_tiles()

func _input(event):
	var bp_root = BN.get_bp_root()
	var cursor_content = BN.get_battle_cursor().cursor_content
	var can_i_move_here = cursor_content.get(\"predict\", \"\") == \"MOVE\"
	var bp_state = bp_root.get_state()
	if event is InputEventKey and event.pressed:
		var key_states = [event.keycode, bp_state, can_i_move_here]
		match key_states:
			[KEY_Z,bp_root.STATE.CHOOSE_MOVE,true]:
				var to = cursor_content['location']
				var turnqueue = BN.get_bp_root().get_turn_queue().turn_queue
				var hlayer = BN.get_HLayer()
				var target_unit = BN.uc_lookup_by_id(turnqueue[0])
				move_unit(target_unit, to)
				hlayer.erase_all()
			[KEY_X,bp_root.STATE.CHOOSE_MOVE,true]:
				pass#UNDO ACTION #TODO

func move_unit(unit, to):
	#HANDLE ALL REFERENCES
	var from = unit.position
	var original_from = from+Vector2i(0,0)
	var bp_root = BN.get_bp_root()
	bp_root.set_state(\"LOADING\")
	var sprite=unit.get_node(\"BattleUnit2D/Sprite2D\")
	var char2d=unit.get_node(\"BattleUnit2D\")
	print(\"MI STO MUOVENDO da\", from, \"a\", to)
	
	var tile_size = Vector2i(Global.TW, Global.TH)  # Adatta alla tua tilemap
	var path_positions=pathing(from,to) #TODO : PATHING ALGORITHM, IN FUNZIONE DELLA MAPPA
	
	# Converti le coordinate della griglia in coordinate isometriche
	for elem in path_positions:
		from=elem[0]
		to=elem[1]
		unit.orient=elem[2]
		char2d.playy(\"walk\")
		
		var start_pos = Vector2(Global.g2w(from.x,from.y)[0],Global.g2w(from.x,from.y)[1])
		var target_pos = Vector2(Global.g2w(to.x,to.y)[0],Global.g2w(to.x,to.y)[1])

		var speed = 50  # Velocit√† in pixel al secondo

		#sprite.position = start_pos  # Imposta la posizione iniziale

		# Movimento interpolato
		while sprite.position.distance_to(target_pos) > 1:
			var direction = (target_pos - sprite.position).normalized()
			sprite.position += direction * speed * get_process_delta_time()
			await get_tree().process_frame  # Aspetta il prossimo frame per movimento fluido

		# Allinea alla posizione finale per evitare piccoli errori di floating point
		sprite.position = target_pos
		#unit.position = target_pos
		#char2d.position = target_pos
	unit.position=to
	BN.get_unit_container().refresh()
	BN.get_battle_cursor().update_cursor_position()

	bp_root.set_state(\"FREE\")
	print(\"MOVIMENTO COMPLETATO!\")

func pathing(from,to,map=null,extra=null):
	#enum orient { SOUTH, EAST, NORTH, WEST }
	#TODO: GESTISCI TUTTO....UNITA,BURRONI,FIUMI ECC
	var movemap = BN.get_data_grid().get_movemap()
	
	var path_positions = get_node(\"Algorithms\").find_path(from,to,movemap)
	var orient= Global.orient.EAST
	# Prima mossa: muoviti lungo X fino alla posizione corretta

	for elem in path_positions:
		var diff = elem[1] - elem[0]  # Differenza tra le posizioni
		if diff.x >0: orient = Global.orient.EAST
		elif diff.x < 0: orient = Global.orient.WEST
		elif diff.y >0: orient = Global.orient.NORTH
		elif diff.y < 0: orient = Global.orient.SOUTH

		elem.append(orient)
	return path_positions


#TODO : PATHING ALGORITHM, IN FUNZIONE DELLA MAPPA
# Funzione di conversione da coordinate della griglia a schermo isometriche
"

[sub_resource type="GDScript" id="GDScript_cpdko"]
script/source = "extends Node
func find_path(from: Vector2i, to: Vector2i, movemap: Dictionary) -> Array:
	if from == to:
		return [from]  # Se siamo gi√† alla destinazione, restituisci solo il punto
	
	if not movemap.has(to):
		return []  # Se \"from\" o \"to\" non esistono in movemap, nessun percorso √® possibile
	
	var open_list = [from]
	var came_from = {}
	var g_score = {from: 0}  # Costo del cammino fino a \"from\"
	var f_score = {from: from.distance_to(to)}  # Stima del costo totale
	
	while open_list:
		# Trova il nodo con il valore f_score pi√π basso
		open_list.sort_custom(func(a, b): return f_score.get(a, INF) < f_score.get(b, INF))
		var current = open_list.pop_front()

		if current == to:
			return path_to_segments(reconstruct_path(came_from, current))  # Percorso trasformato in segmenti

		for neighbor in get_neighbors(current, movemap):
			var tentative_g_score = g_score[current] + 1  # Distanza uniforme
			
			if tentative_g_score < g_score.get(neighbor, INF):
				came_from[neighbor] = current
				g_score[neighbor] = tentative_g_score
				f_score[neighbor] = tentative_g_score + neighbor.distance_to(to)

				if neighbor not in open_list:
					open_list.append(neighbor)

	return []  # Nessun percorso trovato

# **üìå Ricostruisce il percorso dal punto finale**
func reconstruct_path(came_from: Dictionary, current: Vector2i) -> Array:
	var path = [current]
	while current in came_from:
		current = came_from[current]
		path.append(current)
	path.reverse()
	return path  # Restituisce il percorso grezzo per poi convertirlo in segmenti

# **üìå Trova i vicini validi (solo posizioni presenti in `movemap`)**
func get_neighbors(pos: Vector2i, movemap: Dictionary) -> Array:
	var directions = [Vector2i(1,0), Vector2i(-1,0), Vector2i(0,1), Vector2i(0,-1)]
	var neighbors = []
	
	for dir in directions:
		var neighbor = pos + dir
		if movemap.has(neighbor) and movemap[neighbor]:  # Solo posizioni valide
			neighbors.append(neighbor)
	
	return neighbors

# **üìå Converte il percorso in segmenti rettilinei (solo X o solo Y per segmento)**
func path_to_segments(path: Array) -> Array:
	var segments = []
	if path.size() < 2:
		return segments  # Nessun segmento se il percorso √® troppo corto

	var start = path[0]  # Punto di partenza del primo segmento
	var direction = Vector2i(0, 0)  # Direzione corrente

	for i in range(1, path.size()):
		var current_direction = path[i] - path[i-1]  # Calcola la direzione attuale
		
		# Se la direzione cambia (da orizzontale a verticale o viceversa)
		if current_direction.x != direction.x or current_direction.y != direction.y:
			if direction != Vector2i(0, 0):  # Se non √® il primo movimento
				segments.append([start, path[i-1]])  # Chiudi il segmento precedente
			start = path[i-1]  # Nuovo inizio segmento
			direction = current_direction  # Aggiorna la direzione attuale

	# Aggiungi l'ultimo segmento
	segments.append([start, path[-1]])

	return segments
"

[sub_resource type="GDScript" id="GDScript_era1c"]
script/source = "extends Node
var BN = Global.battle_nodes()


	
func attack_event(attacker:BattleUnit, target):
	var orient
	var bp_root = BN.get_bp_root()
	bp_root.set_state(\"LOADING\")
	var diff=target.position-attacker.position
	if diff.x >0: orient = Global.orient.EAST
	elif diff.x < 0: orient = Global.orient.WEST
	elif diff.y >0: orient = Global.orient.NORTH
	elif diff.y < 0: orient = Global.orient.SOUTH
	attacker.orient=orient
	#TODO FIND COLLATERAL
	var collateral=[]
	
	var datagrid = BN.get_data_grid()
	var weapon
	attacker.playy(\"attack\")
	target.apply_damage()
		#var w_type = attacker.get_weapon()
	#if dmg_result < 0: dmg_result = 0
	#Animation.attack()
"

[sub_resource type="GDScript" id="GDScript_7laoh"]
script/source = "extends Node
#enum team { MY, ENEMY, ALLIED, NEUTRAL }
func sleep(seconds: float) -> void:
	await get_tree().create_timer(seconds).timeout
func perform_turn():
	var turn_queue_node = get_parent().get_node(\"TurnQueue\")
	var enemy_pos_unit = turn_queue_node.turn_queue[0]
	print(\"FAKE ENEMY TURN (WAIT):\")
	print(enemy_pos_unit.position)
	print(enemy_pos_unit.unit)
	
	#SVOLGO IL TURNO
	await sleep(2.0)
	turn_queue_node.reload_queue()
"

[sub_resource type="GDScript" id="GDScript_msym8"]
script/source = "extends Control

@onready var popup_menu = $FightMenu
var menu_open = false
var BN = Global.battle_nodes()

func _ready():
	pass


func load_menu():
	var turn_queue = get_parent().get_node(\"TurnQueue\").turn_queue
	if turn_queue. is_empty() or BN.uc_lookup_by_id(turn_queue[0]).team!=Global.team.MY: return
	var this_unit = BN.get_battle_cursor().cursor_content['unit']
	var chosen_skills = this_unit.chosen_skills
	
	#PRELOAD ICON
	var icon_path = popup_menu.theme.get(\"PopupMenu/icons/submenu\").resource_path   
	if icon_path!=\"\":# Lista d
		var icon = load(icon_path)  # Carica l'immagine come Texture2D
		var img = icon.get_image()
		img.resize(16, 16)  # Ridimensiona l'immagine
		var new_icon = ImageTexture.create_from_image(img)
		popup_menu.theme.set_icon(\"submenu\", \"PopupMenu\", new_icon)
	

	
	popup_menu.position.y=get_viewport_rect().size.y + popup_menu.size.y
	popup_menu.hide()  # Nasconde il menu all'inizio

	# Crea il sottomenu Azione PRIMA di aggiungerlo al menu principale
	var action_menu = PopupMenu.new()
	action_menu.name = \"action_menu\"
	popup_menu.add_child(action_menu)
	action_menu.add_item(\"Attack\", 3)
	
	#LOAD DYMANICALLY # TODO ABILITA DI CLASSE MASTERATE
	#action_menu.theme=popup_menu.theme
	var skill_id = 100  # Un ID arbitrario per le skill, assicurati che non si sovrapponga ad altri
	for special_class in chosen_skills:
		for skillgroup in chosen_skills[special_class]:
			action_menu.add_item(skillgroup, skill_id)
			skill_id += 1  # Incrementa per evitare ID duplicati
	#LOAD DYMANICALLY

	# Menu principale
	popup_menu.add_submenu_item(\"Action\", \"action_menu\")
	popup_menu.add_item(\"Move\", 1)
	popup_menu.add_item(\"Wait\", 2)

	# Collegamento segnali per i menu
	popup_menu.id_pressed.connect(_on_menu_item_pressed)
	action_menu.id_pressed.connect(_on_menu_item_pressed)
func open_menu():
	var cursor = BN.get_battle_cursor()
	cursor.lock()
	popup_menu.popup()
	
func close_menu():
	var cursor = BN.get_battle_cursor()
	cursor.unlock()
	popup_menu.hide()

func _on_menu_item_pressed(id):
	var cursor = BN.get_battle_cursor()
	var battle_phase_state = get_parent().battle_phase_state
	match id:
		1: 
			var move_logic = get_parent().get_node(\"BattleLogic/MoveLogic\")
			move_logic.move_action_map()
		3:
			var action_logic = get_parent().get_node(\"BattleLogic/ActionLogic\")
			action_logic.atk_map()
			


	close_menu()  # Chiude il menu dopo la selezione
"

[sub_resource type="GDScript" id="GDScript_74uan"]
script/source = "extends Node
var BN = Global.battle_nodes()



func _input(event):
	var bp_root = BN.get_bp_root()
	var bp_state = bp_root.get_state()
	var popup_menu = get_parent().get_node(\"FightMenu\")
	var turn_queue = get_parent().get_parent().get_node(\"TurnQueue\").turn_queue
	if event is InputEventKey and event.pressed:
		var cursor = BN.get_battle_cursor()
		#var phase_state=
		var cursor_unit = cursor.cursor_content.get(\"unit\", null)
		var hover_unit_with_turn = cursor_unit != null and cursor_unit.id == BN.uc_lookup_by_id(turn_queue[0]).id
		#var state_key = [current_state, event.keycode]
		var keycode_bpstate_iscursoronturn = [event.keycode,bp_state,hover_unit_with_turn]
		match keycode_bpstate_iscursoronturn:
			[KEY_ENTER,bp_root.STATE.FREE,true]:
				#get_parent().load_menu()
				popup_menu.open_menu()
"

[sub_resource type="GDScript" id="GDScript_bey5f"]
script/source = "extends PopupMenu
var BN = Global.battle_nodes()


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.

func open_menu():
	var cursor = BN.get_battle_cursor()
	cursor.lock()
	popup()
	
func close_menu():
	var cursor = BN.get_battle_cursor()
	cursor.lock()
	hide()
"

[node name="BattlePhase" type="Node"]
script = SubResource("GDScript_mkj42")

[node name="TurnQueue" type="Node" parent="."]
script = SubResource("GDScript_8g1m3")

[node name="BattleLogic" type="Node" parent="."]
script = SubResource("GDScript_eke8b")

[node name="MoveLogic" type="Node" parent="BattleLogic"]
script = SubResource("GDScript_ywtb7")

[node name="Algorithms" type="Node" parent="BattleLogic/MoveLogic"]
script = SubResource("GDScript_cpdko")

[node name="ActionLogic" type="Node" parent="BattleLogic"]
script = ExtResource("1_8fiwh")

[node name="AttackLogic" type="Node" parent="BattleLogic/ActionLogic"]
script = SubResource("GDScript_era1c")

[node name="SkillLogic" type="Node" parent="BattleLogic/ActionLogic"]

[node name="EnemyAI" type="Node" parent="."]
script = SubResource("GDScript_7laoh")

[node name="BattlePhaseUI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = SubResource("GDScript_msym8")

[node name="InputController" type="Node" parent="BattlePhaseUI"]
script = SubResource("GDScript_74uan")

[node name="FightMenu" type="PopupMenu" parent="BattlePhaseUI"]
theme = ExtResource("1_kdefl")
script = SubResource("GDScript_bey5f")

[node name="Node" type="Node" parent="."]
