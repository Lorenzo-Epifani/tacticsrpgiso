[gd_scene load_steps=19 format=4 uid="uid://bxvglqyw8cfte"]

[ext_resource type="Texture2D" uid="uid://c6v3quk7fjkvc" path="res://assets/ground/base green.png" id="1_o1eh3"]
[ext_resource type="Script" path="res://scenes/uis/camera/camera_2d.gd" id="2_3ihl1"]
[ext_resource type="Script" path="res://scenes/uis/camera/cursor_node.gd" id="3_qowfu"]
[ext_resource type="Texture2D" uid="uid://c1u5qvikgkmyx" path="res://assets/ui/battle_cursor.png" id="3_qvfh3"]
[ext_resource type="Texture2D" uid="uid://byk7q12we4k26" path="res://assets/ground/hl.png" id="5_2k8bw"]
[ext_resource type="PackedScene" uid="uid://4m7qdl2ojld1" path="res://scenes/uis/battle/battle_ui.tscn" id="8_skbsw"]

[sub_resource type="GDScript" id="GDScript_03ge3"]
script/source = "extends Node
#BaseFight
var battle_data: Dictionary
@onready var data_grid = $DataGrid  # âœ… Primo livello: DataGrid
@onready var phase_container = $PhaseContainer  # Ottieni il nodo figlio

enum BattlePhases { DEPLOY, BATTLE, REWARDS }
var current_phase: int = BattlePhases.DEPLOY  # Inizia dalla fase di Deploy
var current_node: Node = null  # Nodo attuale della fase
#PhaseContainer

# Percorsi ai file delle scene delle fasi
const BATTLE_SCENE = preload(\"res://scenes/battle/battle_phase.tscn\")
const REWARDS_SCENE = preload(\"res://scenes/battle/reward_phase.tscn\")
const DEPLOY_SCENE = preload(\"res://scenes/battle/deploy_phase.tscn\")

func _ready():
	print(ProjectSettings.globalize_path(\"res://\"))

	print(\"phasecont READY\")
	data_grid.build_grid_data()
	start_phase(current_phase)  # Avvia la prima fase

func start_phase(phase: int):
	\"\"\"Avvia la fase specificata della battaglia\"\"\"
	if current_node:
		current_node.queue_free()  # Rimuove il nodo precedente se esiste
		await current_node.tree_exited  # Attende la sua completa rimozione
	
	match phase:
		BattlePhases.DEPLOY:
			current_node = DEPLOY_SCENE.instantiate()
		BattlePhases.BATTLE:
			current_node = BATTLE_SCENE.instantiate()
		BattlePhases.REWARDS:
			current_node = REWARDS_SCENE.instantiate()

	if current_node:
		phase_container.add_child(current_node)  # Aggiunge il nodo della fase corrente
		current_node.connect(\"phase_completed\", Callable(self, \"_on_phase_completed\"))  # Ascolta evento fine fase

func _on_phase_completed():
	\"\"\"Gestisce la transizione tra le fasi\"\"\"
	if current_phase == BattlePhases.DEPLOY:
		current_phase = BattlePhases.BATTLE
	elif current_phase == BattlePhases.BATTLE:
		current_phase = BattlePhases.REWARDS
	else:
		print(\"âœ… Battaglia completata!\")  
		#NEXT EVENT
		# Puoi fare il cleanup qui
		return
	
	start_phase(current_phase)  # Avvia la nuova fase
"

[sub_resource type="GDScript" id="GDScript_fasqg"]
script/source = "extends Node


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass
	
	
func get_data_grid():
	var target_node = get_parent().find_child(\"DataGrid\")
	return target_node

func get_batte_cursor():
	var cursor = get_parent().find_child(\"CursorNode2D\")
	return cursor
	
func get_unit_container():
	var target_node = get_parent().find_child(\"DataGrid\").find_child(\"UnitsContainer\")
	return target_node
	
func get_base_battle_ui():
	var target_node
	return get_parent().find_child(\"BattleUI\")
	
"

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_sachx"]
texture = ExtResource("1_o1eh3")
margins = Vector2i(16, 16)
separation = Vector2i(16, 16)
texture_region_size = Vector2i(32, 32)
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
0:4/0 = 0
1:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
1:6/0 = 0
2:6/0 = 0
2:4/0 = 0
3:0/0 = 0
2:0/0 = 0
4:0/0 = 0
5:0/0 = 0
5:3/0 = 0
4:3/0 = 0
3:3/0 = 0
2:3/0 = 0
1:3/0 = 0
0:3/0 = 0
0:0/0 = 0
1:0/0 = 0
0:1/0 = 0

[sub_resource type="TileSet" id="TileSet_n1nc8"]
tile_shape = 1
tile_layout = 4
tile_offset_axis = 1
tile_size = Vector2i(32, 16)
sources/0 = SubResource("TileSetAtlasSource_sachx")

[sub_resource type="GDScript" id="GDScript_7u1l5"]
script/source = "extends TileMapLayer



	
func update_tile(x, y, new_atlas_coords):
	set_cell(Vector2i(x, y), 0, new_atlas_coords, 0)  # Cambia la tile
"

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_5cies"]
texture = ExtResource("5_2k8bw")
margins = Vector2i(16, 0)
separation = Vector2i(16, 0)
texture_region_size = Vector2i(32, 16)
0:4/0 = 0
0:7/0 = 0
0:10/0 = 0
0:1/0 = 0
1:1/0 = 0
1:4/0 = 0
1:7/0 = 0
1:10/0 = 0

[sub_resource type="TileSet" id="TileSet_0epji"]
tile_shape = 1
tile_layout = 4
tile_offset_axis = 1
tile_size = Vector2i(32, 16)
sources/0 = SubResource("TileSetAtlasSource_5cies")

[sub_resource type="GDScript" id="GDScript_del22"]
script/source = "extends TileMapLayer


# Called when the node enters the scene tree for the first time.

	
func highlight_tile(x, y, highlight: bool):
	if highlight:
		set_cell(Vector2i(x, y), 0, Vector2i(1, 0), 0)  # Imposta la tile evidenziata
	else:
		erase_cell(Vector2i(x, y))  # Rimuove la tile
		

func reload_tiles():
	for child in get_children():
		child.queue_free()  # Segna il nodo per la rimozione al prossimo frame
	var data_grid = get_parent().get_node(\"DataGrid\")  # Nodo fratello con il dizionari
	for pos in data_grid.grid_data:
		var content = data_grid.grid_data[pos]
		var tiletype
		if content.get(\"deployable\",false):
			tiletype = \"MOVE\"
		else:
			tiletype = content.get(\"predict\",false) # QUI VA MESSO L'ID DELL ANIMAZIONE DI ATTACCO O MOVIMENTO PER COLORARE LA TILE
		if tiletype:
			var anim_sprite = Animations.over_tile_sprite(tiletype)
			var world_pos = Global.g2w(pos.x+1,pos.y-1) 
			anim_sprite.position = Vector2i(world_pos[0],world_pos[1])
			anim_sprite.play(\"default\")
			add_child(anim_sprite)
	
	

	
	
"

[sub_resource type="GDScript" id="GDScript_8ck61"]
script/source = "extends Node
class_name DataGrid
#DataGrid
@onready var units_container = $UnitsContainer
@onready var terrain = $Terrain
@onready var static_container = $StaticsContainer

# Dizionario principale: raccoglie dati da units, terrain e static
var grid_data: Dictionary = {}


func update_grid_data():
	pass

func get_at(grid_position: Vector2i):
	var content = grid_data.get(grid_position, { \"unit\": null, \"terrain\": null, \"statics\": null })
	print(grid_position)	
	print(content)
	return content
	
func _ready():	
	print(\"DataGrid ready\")
	update_grid_data()
	pass


# ðŸ”¹ Costruisce il dizionario leggendo i dati dai 3 nodi figli
func build_grid_data():
	# Recupera tutte le coordinate uniche dai 3 dizionari
	if !units_container or !terrain or ! static_container: return
	var all_keys = units_container.data_dict.keys() + terrain.data_dict.keys() + static_container.data_dict.keys()
	all_keys = all_keys.duplicate()  # Rimuove riferimenti duplicati
	all_keys.sort()  # Opzionale: Ordina per una visualizzazione piÃ¹ chiara

	for key in all_keys:
		grid_data[key] = {
			\"unit\": units_container.data_dict.get(key, null),  # Personaggio o null
			\"terrain\": terrain.data_dict.get(key, null),  # Default: altezza 0, terreno neutrale
			\"statics\": static_container.data_dict.get(key, null)  # Oggetto statico o null
		}

	print(\"ðŸ“Œ GridData Generata:\", JSON.stringify(grid_data, \"\\t\"))

# ðŸ”¹ Metodo per ottenere dati da una cella specifica
"

[sub_resource type="GDScript" id="GDScript_mwm6u"]
script/source = "extends Node
#UnitCOntainer
var batte_unit_scene = preload(\"res://scenes/battle/battle_unit.tscn\")  # Carica la scena del personaggio
var data_dict = {}
# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	var battle_data = find_parent(\"BaseFight\").battle_data  # Ottiene il valore del genitore all'avvio
	var characters = battle_data.units.enemies
	for el in characters:  # Creiamo 3 istanze
		var battle_unit_instance = batte_unit_scene.instantiate()
		battle_unit_instance.initialize(el['soft_stat'],el['position'],el['meta'])  # Passiamo la cartella dell'animazione
		#print(\"CREATO:\" + str(char) + \"COORD:\" + str(coord))
		# Posizioniamo i personaggi in modo che non si sovrappongano
 
		
		add(battle_unit_instance)
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.


func add(unit,pos=null):
	add_child(unit)
	update_dict(unit)
	
func move(from, to):
	pass
	#TODO
	
func remove(position):
	data_dict[position]=null
	#TODO
	
func update_dict(unit):
	#print(unit.char2d)
	#var grid_coord = Global.w2g(unit.sprite.global_transform.origin[0],unit.sprite.global_transform.origin[1])
	unit.char2d.playy(\"walk\")
	var grid_xy = Global.w2g(unit.sprite.position[0],unit.sprite.position[1])
	data_dict[Vector2i(grid_xy[0], grid_xy[1])] = unit
	if get_parent().has_node(\"StaticsContainer\") and get_parent().has_node(\"Terrain\"):
		get_parent().build_grid_data()
"

[sub_resource type="GDScript" id="GDScript_k81hd"]
script/source = "extends Node
#StaticContainerr

var data_dict = {}

func add(static_el,pos=null):
	update_dict(static_el)
	add_child(static_el)
	
func move(from, to):
	pass
	#TODO
	
func remove(from, to):
	pass
	#TODO
	
func update_dict(static_el):
	var grid_coord = Global.w2g(static_el.global_transform.origin[0],static_el.global_transform.origin[1])

	data_dict[Vector2i(grid_coord[0],grid_coord[1])] = static_el
"

[sub_resource type="GDScript" id="GDScript_nkgw7"]
script/source = "extends Node
#Terrain

var data_dict = {}
# Called when the node enters the scene tree for the first time.

func add(terrain,pos=null):
	update_dict(terrain)
	add_child(terrain)
	
func move(from, to):
	pass
	#TODO
	
func remove(from, to):
	pass
	#TODO
	
func update_dict(terrain):
	var grid_coord = Global.w2g(terrain.global_transform.origin[0],terrain.global_transform.origin[1])

	data_dict[Vector2i(grid_coord[0],grid_coord[1])] = terrain
"

[node name="BaseFight" type="Node"]
script = SubResource("GDScript_03ge3")

[node name="FightGlobal" type="Node" parent="."]
script = SubResource("GDScript_fasqg")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(3.5, 3.5)
position_smoothing_enabled = true
drag_horizontal_enabled = true
drag_vertical_enabled = true
drag_horizontal_offset = 0.06
drag_left_margin = 0.0
drag_top_margin = 0.0
drag_right_margin = 0.0
drag_bottom_margin = 0.0
script = ExtResource("2_3ihl1")

[node name="CursorNode2D" type="Node2D" parent="."]
script = ExtResource("3_qowfu")

[node name="Sprite2D" type="Sprite2D" parent="CursorNode2D"]
z_index = 999
y_sort_enabled = true
rotation = -2.47837
scale = Vector2(0.05, 0.05)
texture = ExtResource("3_qvfh3")

[node name="Layer1" type="TileMapLayer" parent="."]
z_as_relative = false
y_sort_enabled = true
tile_map_data = PackedByteArray("AAAAAP//AAABAAAAAAAAAP3/AAABAAAAAAABAP7/AAABAAAAAAABAP3/AAABAAAAAAACAP7/AAABAAAAAAACAP//AAABAAAAAAACAAAAAAABAAAAAAABAAEAAAABAAAAAAAAAAEAAAABAAAAAAABAAAAAAABAAAAAAABAP//AAABAAAAAAABAAIAAAAEAAAAAAD/////AAABAAAAAAD///7/AAABAAAAAAAAAPv/AAABAAAAAAAAAPz/AAABAAAAAAD///3/AAABAAAAAAABAPr/AAABAAAAAAABAPv/AAABAAAAAAACAPz/AAABAAAAAAACAP3/AAABAAAAAAADAP7/AAABAAAAAAD+////AAABAAAAAAD//wAAAAABAAAAAAD//wEAAAABAAAAAAAAAAIAAAABAAAAAAAAAAMAAAAEAAAAAAABAAMAAAAEAAAAAAACAAIAAAAEAAAAAAADAP3/AAABAAAAAAAEAPz/AAABAAAAAAD+//7/AAABAAAAAAAAAAAAAAABAAAAAAAAAP7/AAABAAAAAAAEAAAAAAAEAAAAAAACAAEAAAABAAAAAAACAAMAAAAEAAAAAAAAAAQAAAAEAAAAAAD///v/AAABAAAAAAD///z/AAABAAAAAAD+//3/AAABAAAAAAD+/wAAAAABAAAAAAABAPz/AAABAAAAAAADAP//AAABAAAAAAADAAAAAAABAAAAAAACAPv/AAABAAAAAAADAPv/AAABAAAAAAAEAPv/AAABAAAAAAADAPz/AAABAAAAAAAEAP7/AAABAAAAAAADAPr/AAABAAAAAAAEAPr/AAABAAAAAAAEAP3/AAABAAAAAAACAPr/AAABAAAAAAAAAPr/AAABAAAAAAABAPn/AAABAAAAAAACAPn/AAABAAAAAAADAPn/AAABAAAAAAAEAPn/AAABAAAAAAAFAPn/AAABAAAAAAAFAPr/AAABAAAAAAAFAPv/AAABAAAAAAAFAPz/AAABAAAAAAAFAP3/AAABAAAAAAAFAP7/AAABAAAAAAAFAP//AAABAAAAAAAEAP//AAABAAAAAAAAAPn/AAABAAAAAAD///n/AAABAAAAAAD///r/AAABAAAAAAAGAPz/AAABAAAAAAAHAPz/AAABAAAAAAAHAP3/AAABAAAAAAAIAP3/AAABAAAAAAACAPj/AAABAAAAAAACAPf/AAABAAAAAAACAPb/AAABAAAAAAABAPb/AAABAAAAAAAAAPb/AAABAAAAAAD+//z/AAABAAAAAAD+//v/AAABAAAAAAD9//3/AAABAAAAAAD9//7/AAABAAAAAAD9////AAABAAAAAAD9/wAAAAABAAAAAAD9/wEAAAABAAAAAAD9/wIAAAABAAAAAAD+/wIAAAABAAAAAAD//wIAAAABAAAAAAD+/wEAAAABAAAAAAD8/wEAAAABAAAAAAD7/wEAAAABAAAAAAD6/wAAAAABAAAAAAD6////AAABAAAAAAD7////AAABAAAAAAD7//7/AAABAAAAAAD8//7/AAABAAAAAAD8//3/AAABAAAAAAD9//z/AAABAAAAAAD8/wAAAAABAAAAAAD7/wAAAAABAAAAAAD8////AAABAAAAAAD+//r/AAABAAAAAAD9//r/AAABAAAAAAD9//v/AAABAAAAAAD8//v/AAABAAAAAAD8//z/AAABAAAAAAD///b/AAAAAAAAAAA=")
tile_set = SubResource("TileSet_n1nc8")
collision_enabled = false
script = SubResource("GDScript_7u1l5")

[node name="HLayer" type="TileMapLayer" parent="."]
y_sort_enabled = true
tile_set = SubResource("TileSet_0epji")
script = SubResource("GDScript_del22")

[node name="BattleUI" parent="." instance=ExtResource("8_skbsw")]

[node name="DataGrid" type="Node" parent="."]
script = SubResource("GDScript_8ck61")

[node name="UnitsContainer" type="Node" parent="DataGrid"]
script = SubResource("GDScript_mwm6u")

[node name="StaticsContainer" type="Node" parent="DataGrid"]
script = SubResource("GDScript_k81hd")

[node name="Terrain" type="Node" parent="DataGrid"]
script = SubResource("GDScript_nkgw7")

[node name="PhaseContainer" type="Node" parent="."]
